{
  "Severity": "CRITICAL",
  "UpdatedAt": "2019-02-18T23:53:19Z",
  "Package": {
    "Ecosystem": "NPM",
    "Name": "sequelize"
  },
  "Advisory": {
    "DatabaseId": 1249,
    "Id": "MDE2OlNlY3VyaXR5QWR2aXNvcnlHSFNBLTljMnAtanc4cC1mODR2",
    "GhsaId": "GHSA-9c2p-jw8p-f84v",
    "References": [
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2016-10556"
      },
      {
        "Url": "https://github.com/advisories/GHSA-9c2p-jw8p-f84v"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-9c2p-jw8p-f84v"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2016-10556"
      }
    ],
    "Description": "Affected versions of `sequelize` cast arrays to strings and fail to properly escape the resulting SQL statement, resulting in a SQL injection vulnerability.\n\n\n## Proof of Concept\nIn Postgres, SQLite, and Microsoft SQL Server there is an issue where arrays are treated as strings and improperly escaped.\n\nExample Query:\n```\ndatabase.query('SELECT * FROM TestTable WHERE Name IN (:names)', {\n  replacements: {\n    names: directCopyOfUserInput\n  }\n});\n```\n\nIf the user inputs the value of `:names` as:\n```\n[\"test\", \"'); DELETE TestTable WHERE Id = 1 --')\"]\n```\n\nThe resulting SQL statement will be:\n```\nSELECT Id FROM Table WHERE Name IN ('test', '\\'); DELETE TestTable WHERE Id = 1 --')\n```\nAs the backslash has no special meaning in PostgreSQL, MSSQL, or SQLite, the statement will delete the record in TestTable with an Id of 1.\n\n\n## Recommendation\n\nUpdate to version 3.20.0 or later.",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2019-02-18T23:54:24Z",
    "Severity": "CRITICAL",
    "Summary": "SQL Injection in sequelize",
    "UpdatedAt": "2021-01-08T20:57:38Z",
    "WithdrawnAt": ""
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "3.20.0"
      },
      "VulnerableVersionRange": "\u003c= 3.19.3"
    }
  ]
}